import sqlite3
import requests
import os
import logging
from datetime import datetime
from telegram import Bot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class HotWheelsMonitor:
    def __init__(self):
        self.bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        self.init_db()
        
        # –°–ü–ò–°–û–ö –¢–û–í–ê–†–û–í –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
        self.products = [
            {
                'id': 'hw_basic', 
                'name': 'Hot Wheels Basic Car',
                'url': 'https://lenta.com/product/...',  # –ó–ê–ú–ï–ù–ò –ù–ê –†–ï–ê–õ–¨–ù–´–ô URL
                'store': '–õ–µ–Ω—Ç–∞'
            },
            # –î–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –∑–¥–µ—Å—å
        ]

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect('hotwheels.db')
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS stock_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                product_id TEXT,
                store_id TEXT,
                quantity INTEGER,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS notifications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                product_id TEXT,
                old_quantity INTEGER,
                new_quantity INTEGER,
                increase INTEGER,
                acknowledged BOOLEAN DEFAULT FALSE,
                message_id INTEGER,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def get_current_stock(self, product_url):
        """
        –ó–ê–ì–õ–£–®–ö–ê - –ó–ê–ú–ï–ù–ò –ù–ê –†–ï–ê–õ–¨–ù–´–ô –ü–ê–†–°–ò–ù–ì
        """
        try:
            # TODO: –†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞ –õ–µ–Ω—Ç—ã
            # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:
            # headers = {
            #     'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            # }
            # response = requests.get(product_url, headers=headers)
            # return parse_stock_from_html(response.text)
            
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
            import random
            stock = random.randint(0, 10)
            logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω –æ—Å—Ç–∞—Ç–æ–∫: {stock} (–∑–∞–≥–ª—É—à–∫–∞)")
            return stock
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return None

    def check_all_products(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        conn = sqlite3.connect('hotwheels.db')
        cursor = conn.cursor()
        
        for product in self.products:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞: {product['name']}")
            
            current_stock = self.get_current_stock(product['url'])
            if current_stock is None:
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∏–∑ –ë–î
            cursor.execute('''
                SELECT quantity FROM stock_history 
                WHERE product_id = ? 
                ORDER BY timestamp DESC LIMIT 1
            ''', (product['id'],))
            
            result = cursor.fetchone()
            previous_stock = result[0] if result else 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
            cursor.execute('''
                INSERT INTO stock_history (product_id, store_id, quantity)
                VALUES (?, ?, ?)
            ''', (product['id'], product['store'], current_stock))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
            if current_stock > previous_stock:
                increase = current_stock - previous_stock
                logger.info(f"üö® –û–ë–ù–ê–†–£–ñ–ï–ù–û –£–í–ï–õ–ò–ß–ï–ù–ò–ï: +{increase} —à—Ç.")
                self.send_notification(product, previous_stock, current_stock, increase)
            else:
                logger.info(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç: {previous_stock} ‚Üí {current_stock}")
        
        conn.commit()
        conn.close()

    def send_notification(self, product, old_qty, new_qty, increase):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        try:
            message = (
                f"üö® HOT WHEELS ALERT!\n"
                f"üéØ {product['name']}\n"
                f"üè™ {product['store']}\n"
                f"üìä –ë—ã–ª–æ: {old_qty} ‚Üí –°—Ç–∞–ª–æ: {new_qty}\n"
                f"üìà –ü—Ä–∏—Ä–æ—Å—Ç: +{increase} —à—Ç.\n"
                f"‚è∞ {datetime.now().strftime('%H:%M %d.%m.%Y')}\n"
                f"\n–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."
            )
            
            self.bot.send_message(
                chat_id=self.chat_id,
                text=message
            )
            
            logger.info("üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üé¨ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Hot Wheels...")
    monitor = HotWheelsMonitor()
    monitor.check_all_products()
    logger.info("üèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    main()
