import os
import asyncio
import logging
import schedule
import time
import threading
from flask import Flask
from telegram_bot import HotWheelsMonitor

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
monitor = None

@app.route('/')
def home():
    return "‚úÖ HotWheels Bot is running!"

@app.route('/check-now')
def check_now():
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)"""
    asyncio.run(monitor.run_scheduled_monitoring())
    return "‚úÖ Check completed"

def run_scheduled_checks():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ 10:00 –∏ 18:00 –ø–æ –ú–°–ö (07:00 –∏ 15:00 UTC)
    schedule.every().day.at("07:00").do(lambda: asyncio.run(monitor.run_scheduled_monitoring()))
    schedule.every().day.at("15:00").do(lambda: asyncio.run(monitor.run_scheduled_monitoring()))
    
    while True:
        schedule.run_pending()
        time.sleep(60)

def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    global monitor
    try:
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN not found")
            return False
            
        monitor = HotWheelsMonitor(token)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def start_bot():
            asyncio.run(monitor.start_bot())
        
        bot_thread = threading.Thread(target=start_bot)
        bot_thread.daemon = True
        bot_thread.start()
        
        logger.info("ü§ñ Telegram Bot started successfully!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Failed to start bot: {e}")
        return False

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ
bot_started = run_bot()

if bot_started:
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduled_checks)
    scheduler_thread.daemon = True
    scheduler_thread.start()
    logger.info("‚è∞ Scheduler started!")

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    logger.info(f"üöÄ Starting Flask app on port {port}")
    app.run(host='0.0.0.0', port=port)
