import os
import logging
import schedule
import time
import threading
from flask import Flask
from telegram_bot import HotWheelsMonitor

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
monitor = None

@app.route('/')
def home():
    return "‚úÖ HotWheels Bot is running!"

def run_scheduled_monitoring():
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        logger.info("‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

def run_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    logger.info("‚è∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ 10:00 –∏ 18:00 –ø–æ –ú–°–ö (07:00 –∏ 15:00 UTC)
    schedule.every().day.at("07:00").do(run_scheduled_monitoring)
    schedule.every().day.at("15:00").do(run_scheduled_monitoring)
    
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    while True:
        schedule.run_pending()
        time.sleep(60)

def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    global monitor
    try:
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN not found")
            return False
            
        monitor = HotWheelsMonitor(token)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        bot_thread = threading.Thread(target=monitor.start_bot)
        bot_thread.daemon = True
        bot_thread.start()
        
        logger.info("‚úÖ Telegram Bot –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logger.info("üé¨ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if run_bot():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler)
    scheduler_thread.daemon = True
    scheduler_thread.start()
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
else:
    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port)
